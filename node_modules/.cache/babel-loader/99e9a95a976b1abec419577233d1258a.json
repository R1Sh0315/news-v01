{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent } from '@stencil/core/internal/client';\nimport { c as componentOnReady, o as debounce } from './helpers.js';\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n/** Join the non empty segments with \"/\". */\n\nconst generatePath = segments => {\n  const path = segments.filter(s => s.length > 0).join('/');\n  return '/' + path;\n};\n\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n\n  if (useHash) {\n    url = '#' + url;\n  }\n\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n\n  return url;\n};\n\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  } else {\n    history.replaceState(state, '', url);\n  }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\n\n\nconst chainToSegments = chain => {\n  const segments = [];\n\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n\n        if (!param) {\n          return null;\n        }\n\n        segments.push(param);\n      } else if (segment !== '') {\n        segments.push(segment);\n      }\n    }\n  }\n\n  return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\n\n\nconst removePrefix = (prefix, segments) => {\n  if (prefix.length > segments.length) {\n    return null;\n  }\n\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return segments;\n  }\n\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== segments[i]) {\n      return null;\n    }\n  }\n\n  if (segments.length === prefix.length) {\n    return [''];\n  }\n\n  return segments.slice(prefix.length);\n};\n\nconst readSegments = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const segments = parsePath(pathname).segments;\n  return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\n\n\nconst parsePath = path => {\n  let segments = [''];\n  let queryString;\n\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n\n    if (qsStart > -1) {\n      queryString = path.substring(qsStart + 1);\n      path = path.substring(0, qsStart);\n    }\n\n    segments = path.split('/').map(s => s.trim()).filter(s => s.length > 0);\n\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n\n  return {\n    segments,\n    queryString\n  };\n};\n\nconst printRoutes = routes => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n\n  for (const chain of routes) {\n    const segments = [];\n    chain.forEach(r => segments.push(...r.segments));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n\n  console.groupEnd();\n};\n\nconst printRedirects = redirects => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n\n  console.groupEnd();\n};\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\n\n\nconst writeNavState = async function (root, chain, direction, index) {\n  let changed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let animation = arguments.length > 5 ? arguments[5] : undefined;\n\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root); // make sure we can continue interacting the DOM, otherwise abort\n\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n\n    await new Promise(resolve => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation); // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    } // recursively set nested outlets\n\n\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation); // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n\n    return changed;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\n\n\nconst readNavState = async root => {\n  const ids = [];\n  let outlet;\n  let node = root; // eslint-disable-next-line no-cond-assign\n\n  while (outlet = searchNavNode(node)) {\n    const id = await outlet.getRouteId();\n\n    if (id) {\n      node = id.element;\n      id.element = undefined;\n      ids.push(id);\n    } else {\n      break;\n    }\n  }\n\n  return {\n    ids,\n    outlet\n  };\n};\n\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', () => resolve(), {\n      once: true\n    });\n  });\n};\n/** Selector for all the outlets supported by the router. */\n\n\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\n\nconst searchNavNode = root => {\n  if (!root) {\n    return undefined;\n  }\n\n  if (root.matches(OUTLET_SELECTOR)) {\n    return root;\n  }\n\n  const outlet = root.querySelector(OUTLET_SELECTOR);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\n\n\nconst matchesRedirect = (segments, redirect) => {\n  const {\n    from,\n    to\n  } = redirect;\n\n  if (to === undefined) {\n    return false;\n  }\n\n  if (from.length > segments.length) {\n    return false;\n  }\n\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n\n    if (expected === '*') {\n      return true;\n    }\n\n    if (expected !== segments[i]) {\n      return false;\n    }\n  }\n\n  return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\n\n\nconst findRouteRedirect = (segments, redirects) => {\n  return redirects.find(redirect => matchesRedirect(segments, redirect));\n};\n\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i]; // Skip results where the route id does not match the chain at the same index\n\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params); // Only compare routes with the chain that have the same number of parameters.\n\n      if (routeIdParams.length === routeChain.segments.length) {\n        // Maps the route's params into a path based on the path variable names,\n        // to compare against the route chain format.\n        //\n        // Before:\n        // ```ts\n        // {\n        //  params: {\n        //    s1: 'a',\n        //    s2: 'b'\n        //  }\n        // }\n        // ```\n        //\n        // After:\n        // ```ts\n        // [':s1',':s2']\n        // ```\n        //\n        const pathWithParams = routeIdParams.map(key => `:${key}`);\n\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n            break;\n          } // Weight path matches for the same index higher.\n\n\n          score++;\n        }\n      }\n    } // Weight id matches\n\n\n    score++;\n  }\n\n  return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\n\n\nconst matchesSegments = (segments, chain) => {\n  const inputSegments = new RouterSegments(segments);\n  let matchesDefault = false;\n  let allparams;\n\n  for (let i = 0; i < chain.length; i++) {\n    const chainSegments = chain[i].segments;\n\n    if (chainSegments[0] === '') {\n      matchesDefault = true;\n    } else {\n      for (const segment of chainSegments) {\n        const data = inputSegments.next(); // data param\n\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        } else if (data !== segment) {\n          return null;\n        }\n      }\n\n      matchesDefault = false;\n    }\n  }\n\n  const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n\n  if (!matches) {\n    return null;\n  }\n\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      segments: route.segments,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n\n  return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\n\n\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\n\n\nconst findChainForIDs = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n\n  if (match) {\n    return match.map((route, i) => {\n      var _a;\n\n      return {\n        id: route.id,\n        segments: route.segments,\n        params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params)\n      };\n    });\n  }\n\n  return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\n\n\nconst findChainForSegments = (segments, chains) => {\n  let match = null;\n  let bestScore = 0;\n\n  for (const chain of chains) {\n    const matchedChain = matchesSegments(segments, chain);\n\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n\n      if (score > bestScore) {\n        bestScore = score;\n        match = matchedChain;\n      }\n    }\n  }\n\n  return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\n\n\nconst computePriority = chain => {\n  let score = 1;\n  let level = 1;\n\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        score += Math.pow(1, level);\n      } else if (segment !== '') {\n        score += Math.pow(2, level);\n      }\n\n      level++;\n    }\n  }\n\n  return score;\n};\n\nclass RouterSegments {\n  constructor(segments) {\n    this.segments = segments.slice();\n  }\n\n  next() {\n    if (this.segments.length > 0) {\n      return this.segments.shift();\n    }\n\n    return '';\n  }\n\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n\n  return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\n\n\nconst readRedirects = root => {\n  return Array.from(root.children).filter(el => el.tagName === 'ION-ROUTE-REDIRECT').map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to)\n    };\n  });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\n\n\nconst readRoutes = root => {\n  return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\n\n\nconst readRouteNodes = node => {\n  return Array.from(node.children).filter(el => el.tagName === 'ION-ROUTE' && el.component).map(el => {\n    const component = readProp(el, 'component');\n    return {\n      segments: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el)\n    };\n  });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\n\n\nconst flattenRouterTree = nodes => {\n  const chains = [];\n\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n\n  return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\n\n\nconst flattenNode = (chain, chains, node) => {\n  chain = [...chain, {\n    id: node.id,\n    segments: node.segments,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  }];\n\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = /*@__PURE__*/proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n\n    this.__registerHost();\n\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n\n    this.useHash = true;\n  }\n\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getSegments());\n\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const {\n          redirect\n        } = canProceed;\n        const path = parsePath(redirect);\n        this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    } else {\n      await this.onRoutesChanged();\n    }\n  }\n\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getSegments();\n    const canProceed = await this.runGuards(segments);\n\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      } else {\n        return false;\n      }\n    }\n\n    return this.writeNavStateRoot(segments, direction);\n  }\n\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n\n\n  async canTransition() {\n    const canProceed = await this.runGuards();\n\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Navigate to the specified path.\n   *\n   * @param path The path to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n\n\n  async push(path) {\n    let direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'forward';\n    let animation = arguments.length > 2 ? arguments[2] : undefined;\n\n    var _a;\n\n    if (path.startsWith('.')) {\n      const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/'; // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n\n      const url = new URL(path, `https://host/${currentPath}`);\n      path = url.pathname + url.search;\n    }\n\n    let parsedPath = parsePath(path);\n    const canProceed = await this.runGuards(parsedPath.segments);\n\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      } else {\n        return false;\n      }\n    }\n\n    this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /** Go back to previous page in the window.history. */\n\n\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n\n\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n\n\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n\n    const {\n      ids,\n      outlet\n    } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = findChainForIDs(ids, routes);\n\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n\n    const segments = chainToSegments(chain);\n\n    if (!segments) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n\n    this.setSegments(segments, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n    return true;\n  }\n  /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n\n\n  onRedirectChanged() {\n    const segments = this.getSegments();\n\n    if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n      this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n    }\n  }\n  /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n\n\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n  }\n\n  historyDirection() {\n    var _a;\n\n    const win = window;\n\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n\n    if (state > lastState || state >= lastState && lastState > 0) {\n      return ROUTER_INTENT_FORWARD;\n    }\n\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n\n    return ROUTER_INTENT_NONE;\n  }\n\n  async writeNavStateRoot(segments, direction, animation) {\n    if (!segments) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    } // lookup redirect rule\n\n\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(segments, redirects);\n    let redirectFrom = null;\n\n    if (redirect) {\n      const {\n        segments: toSegments,\n        queryString\n      } = redirect.to;\n      this.setSegments(toSegments, direction, queryString);\n      redirectFrom = redirect.from;\n      segments = toSegments;\n    } // lookup route chain\n\n\n    const routes = readRoutes(this.el);\n    const chain = findChainForSegments(segments, routes);\n\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    } // write DOM give\n\n\n    return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n  }\n\n  async safeWriteNavState(node, chain, direction, segments, redirectFrom) {\n    let index = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let animation = arguments.length > 6 ? arguments[6] : undefined;\n    const unlock = await this.lock();\n    let changed = false;\n\n    try {\n      changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n    } catch (e) {\n      console.error(e);\n    }\n\n    unlock();\n    return changed;\n  }\n\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n\n    if (p !== undefined) {\n      await p;\n    }\n\n    return resolve;\n  }\n  /**\n   * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n   *\n   * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n   * Otherwise the beforeEnterHook hook of the target route is executed.\n   */\n\n\n  async runGuards() {\n    let to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSegments();\n    let from = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n\n    if (!to || !from) {\n      return true;\n    }\n\n    const routes = readRoutes(this.el);\n    const fromChain = findChainForSegments(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n\n    const toChain = findChainForSegments(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n\n  async writeNavState(node, chain, direction, segments, redirectFrom) {\n    let index = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let animation = arguments.length > 6 ? arguments[6] : undefined;\n\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n\n    this.busy = true; // generate route event and emit will change\n\n    const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false; // emit did change\n\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n\n    return changed;\n  }\n\n  setSegments(segments, direction, queryString) {\n    this.state++;\n    writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n  }\n\n  getSegments() {\n    return readSegments(window.location, this.root, this.useHash);\n  }\n\n  routeChangeEvent(toSegments, redirectFromSegments) {\n    const from = this.previousPath;\n    const to = generatePath(toSegments);\n    this.previousPath = to;\n\n    if (to === from) {\n      return null;\n    }\n\n    const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n    return {\n      from,\n      redirectedFrom,\n      to\n    };\n  }\n\n  get el() {\n    return this;\n  }\n\n}, [0, \"ion-router\", {\n  \"root\": [1],\n  \"useHash\": [4, \"use-hash\"],\n  \"canTransition\": [64],\n  \"push\": [64],\n  \"back\": [64],\n  \"printDebug\": [64],\n  \"navChanged\": [64]\n}, [[8, \"popstate\", \"onPopState\"], [4, \"ionBackButton\", \"onBackButton\"]]]);\n\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  const components = [\"ion-router\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-router\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Router);\n        }\n\n        break;\n    }\n  });\n}\n\nconst IonRouter = Router;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonRouter, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","c","componentOnReady","o","debounce","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","ROUTER_INTENT_BACK","generatePath","segments","path","filter","s","length","join","generateUrl","useHash","queryString","url","undefined","writeSegments","history","root","direction","state","parsePath","pushState","replaceState","chainToSegments","chain","route","segment","param","params","slice","push","removePrefix","prefix","i","readSegments","loc","pathname","hash","qsStart","indexOf","substring","split","map","trim","printRoutes","routes","console","group","forEach","r","ids","id","debug","groupEnd","printRedirects","redirects","redirect","to","from","writeNavState","index","changed","animation","outlet","searchNavNode","Promise","resolve","result","setRouteId","element","markVisible","e","error","readNavState","node","getRouteId","waitUntilNavNode","document","body","window","addEventListener","once","OUTLET_SELECTOR","matches","querySelector","matchesRedirect","expected","findRouteRedirect","find","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","Object","keys","pathWithParams","key","j","matchesSegments","inputSegments","RouterSegments","matchesDefault","allparams","chainSegments","data","next","mergeParams","beforeEnter","beforeLeave","a","b","assign","findChainForIDs","chains","match","maxMatches","_a","findChainForSegments","bestScore","matchedChain","computePriority","level","pow","constructor","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","component","componentProps","nodes","flattenNode","child","Router","__registerHost","ionRouteWillChange","ionRouteDidChange","previousPath","busy","lastState","componentWillLoad","canProceed","runGuards","getSegments","setSegments","writeNavStateRoot","onRoutesChanged","componentDidLoad","onRedirectChanged","bind","onPopState","historyDirection","onBackButton","ev","detail","register","processNextHandler","back","canTransition","startsWith","currentPath","URL","search","parsedPath","waitPromise","printDebug","navChanged","warn","safeWriteNavState","win","title","location","href","redirectFrom","toSegments","unlock","lock","p","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","routeEvent","routeChangeEvent","emit","redirectFromSegments","redirectedFrom","defineCustomElement$1","customElements","components","get","define","IonRouter","defineCustomElement"],"sources":["/home/h1r0sh1/Documents/work-space/project-news/node_modules/@ionic/core/components/ion-router.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent } from '@stencil/core/internal/client';\nimport { c as componentOnReady, o as debounce } from './helpers.js';\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n/** Join the non empty segments with \"/\". */\nconst generatePath = (segments) => {\n  const path = segments.filter((s) => s.length > 0).join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nconst chainToSegments = (chain) => {\n  const segments = [];\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        segments.push(param);\n      }\n      else if (segment !== '') {\n        segments.push(segment);\n      }\n    }\n  }\n  return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n  if (prefix.length > segments.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return segments;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== segments[i]) {\n      return null;\n    }\n  }\n  if (segments.length === prefix.length) {\n    return [''];\n  }\n  return segments.slice(prefix.length);\n};\nconst readSegments = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const segments = parsePath(pathname).segments;\n  return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substring(qsStart + 1);\n      path = path.substring(0, qsStart);\n    }\n    segments = path\n      .split('/')\n      .map((s) => s.trim())\n      .filter((s) => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const segments = [];\n    chain.forEach((r) => segments.push(...r.segments));\n    const ids = chain.map((r) => r.id);\n    console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise((resolve) => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // eslint-disable-next-line no-cond-assign\n  while ((outlet = searchNavNode(node))) {\n    const id = await outlet.getRouteId();\n    if (id) {\n      node = id.element;\n      id.element = undefined;\n      ids.push(id);\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise((resolve) => {\n    window.addEventListener('ionNavWillLoad', () => resolve(), { once: true });\n  });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(OUTLET_SELECTOR)) {\n    return root;\n  }\n  const outlet = root.querySelector(OUTLET_SELECTOR);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nconst matchesRedirect = (segments, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > segments.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== segments[i]) {\n      return false;\n    }\n  }\n  return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nconst findRouteRedirect = (segments, redirects) => {\n  return redirects.find((redirect) => matchesRedirect(segments, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      // Only compare routes with the chain that have the same number of parameters.\n      if (routeIdParams.length === routeChain.segments.length) {\n        // Maps the route's params into a path based on the path variable names,\n        // to compare against the route chain format.\n        //\n        // Before:\n        // ```ts\n        // {\n        //  params: {\n        //    s1: 'a',\n        //    s2: 'b'\n        //  }\n        // }\n        // ```\n        //\n        // After:\n        // ```ts\n        // [':s1',':s2']\n        // ```\n        //\n        const pathWithParams = routeIdParams.map((key) => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nconst matchesSegments = (segments, chain) => {\n  const inputSegments = new RouterSegments(segments);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const chainSegments = chain[i].segments;\n    if (chainSegments[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of chainSegments) {\n        const data = inputSegments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      segments: route.segments,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave,\n    }));\n  }\n  return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nconst findChainForIDs = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => {\n      var _a;\n      return ({\n        id: route.id,\n        segments: route.segments,\n        params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params),\n      });\n    });\n  }\n  return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nconst findChainForSegments = (segments, chains) => {\n  let match = null;\n  let bestScore = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesSegments(segments, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > bestScore) {\n        bestScore = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (segment !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(segments) {\n    this.segments = segments.slice();\n  }\n  next() {\n    if (this.segments.length > 0) {\n      return this.segments.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter((el) => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map((el) => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter((el) => el.tagName === 'ION-ROUTE' && el.component)\n    .map((el) => {\n    const component = readProp(el, 'component');\n    return {\n      segments: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el),\n    };\n  });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n  chain = [\n    ...chain,\n    {\n      id: node.id,\n      segments: node.segments,\n      params: node.params,\n      beforeLeave: node.beforeLeave,\n      beforeEnter: node.beforeEnter,\n    },\n  ];\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getSegments());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getSegments();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, (processNextHandler) => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified path.\n   *\n   * @param path The path to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(path, direction = 'forward', animation) {\n    var _a;\n    if (path.startsWith('.')) {\n      const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n      // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n      const url = new URL(path, `https://host/${currentPath}`);\n      path = url.pathname + url.search;\n    }\n    let parsedPath = parsePath(path);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /** Go back to previous page in the window.history. */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = findChainForIDs(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map((i) => i.id));\n      return false;\n    }\n    const segments = chainToSegments(chain);\n    if (!segments) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setSegments(segments, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n    return true;\n  }\n  /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n  onRedirectChanged() {\n    const segments = this.getSegments();\n    if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n      this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n    }\n  }\n  /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(segments, direction, animation) {\n    if (!segments) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(segments, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments: toSegments, queryString } = redirect.to;\n      this.setSegments(toSegments, direction, queryString);\n      redirectFrom = redirect.from;\n      segments = toSegments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = findChainForSegments(segments, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise((r) => (resolve = r));\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  /**\n   * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n   *\n   * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n   * Otherwise the beforeEnterHook hook of the target route is executed.\n   */\n  async runGuards(to = this.getSegments(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = findChainForSegments(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = findChainForSegments(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setSegments(segments, direction, queryString) {\n    this.state++;\n    writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n  }\n  getSegments() {\n    return readSegments(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(toSegments, redirectFromSegments) {\n    const from = this.previousPath;\n    const to = generatePath(toSegments);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return this; }\n}, [0, \"ion-router\", {\n    \"root\": [1],\n    \"useHash\": [4, \"use-hash\"],\n    \"canTransition\": [64],\n    \"push\": [64],\n    \"back\": [64],\n    \"printDebug\": [64],\n    \"navChanged\": [64]\n  }, [[8, \"popstate\", \"onPopState\"], [4, \"ionBackButton\", \"onBackButton\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-router\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-router\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Router);\n      }\n      break;\n  } });\n}\n\nconst IonRouter = Router;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonRouter, defineCustomElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}